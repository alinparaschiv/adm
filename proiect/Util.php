<?phpclass Util {	public static function getGigacalorimetruLastIndex ($asociatie, $scara, $tipFactura, $tipServiciu) {		$locatari = 'SELECT * FROM facturi WHERE scara_id="'.$scara.'" ';		$locatari .= 'AND asoc_id="'.$asociatie.'" ';		$locatari .= 'AND tipFactura="'.$tipFactura.'" ';		$locatari .= 'AND tipServiciu="'.$tipServiciu.'" ';		$locatari .= 'ORDER BY fact_id DESC ';		//cho $locatari;		$locatari = mysql_query($locatari) or die ("</br>#Util: getGigacalorimetruLastIndex -- Nu pot afla locatari<br />".mysql_error());		if(mysql_num_rows($locatari) == 0) return null; //nu sunt indexsi vechi		$rezult = array();		$row = mysql_fetch_array($locatari);		$ppu = explode(',', $row['ppu']);		foreach ($ppu as $key => $ppuLocatar)			$ppu[$key] = explode('#', $ppuLocatar);		$locatariID = explode(',', $row['locatari']);		foreach ($locatariID as $nrOrdine=>$locId)			$rezult[$locId] = $ppu[$nrOrdine][1];		return $rezult;	}	public static function getIncalzireScara($scaraId) {		$sql = "SELECT MAX(tip_incalzire) FROM locatari WHERE scara_id=".$_GET['scara_id'];		$sql = mysql_query($sql) or die("</br>#Util: getIncalzireScara -- Nu pot afla tipul serviciului pe scara<br />".mysql_error());		return mysql_result($sql, 0, 'MAX(tip_incalzire)');	}	/* Primeste o valoare numerica intre 1 si 12 si intoarce luna corespunzatoare acelei valori in format string */	public static function format_month($val) {		switch($val) {			case 1:				$month = "Ianuarie";				break;			case 2:				$month = "Februarie";				break;			case 3:				$month = "Martie";				break;			case 4:				$month = "Aprilie";				break;			case 5:				$month = "Mai";				break;			case 6:				$month = "Iunie";				break;			case 7:				$month = "Iulie";				break;			case 8:				$month = "August";				break;			case 9:				$month = "Septembrie";				break;			case 10:				$month = "Octombrie";				break;			case 11:				$month = "Noiembrie";				break;			case 12:				$month = "Decembrie";				break;		}		return $month;	}	/* Primeste o valoare de forma 02-2011 si intoarce "Luna Februarie anul 2011" */	public static function format_date_pdf($val) {		if($val<>null) {			$data = explode('-',$val);			$month = Util::format_month($data[0]);			return ucfirst($month).', '.$data[1];		}	}	public static function get_street($id) {		$query = "SELECT * FROM strazi WHERE str_id=".$id;		$query = mysql_query($query);		$row = mysql_fetch_array($query);		return $row[1];	}	public static function get_asoc_address($id) {		if($id<>null) {			$query = "SELECT * FROM asociatii WHERE asoc_id=".$id;			$query = mysql_query($query);			$row = mysql_fetch_array($query);			return 'str.'.Util::get_street($row[2]).' nr.'.$row[3].' Bloc '.$row[5]. ' Sc.'.$row[4];		}	}	public static function get_sc_address($id) {		if($id<>null) {			$query = "SELECT A.*, S.scara as sc, S.bloc as bloc_s, S.nr as nr_sc FROM asociatii A, scari S WHERE A.asoc_id=S.asoc_id AND scara_id=".$id;			$query = mysql_query($query);			$row = mysql_fetch_array($query);			return 'Str.'.Util::get_street($row[2]).' Nr.'.$row['nr_sc'].' Bloc '.$row['bloc_s']. ' Sc.'.$row['sc'];		}	}	public static function get_asoc_name($id) {		if($id<>null) {			$query = "SELECT * FROM asociatii WHERE asoc_id=".$id;			$query = mysql_query($query);			$row = mysql_fetch_array($query);			return 'Asociatia de Proprietari '.$row[1];		}	}	public static function procent_penalizare($id) {		if($id<>null) {			$query = "SELECT * FROM asociatii_setari WHERE asoc_id=".$id;			$query = mysql_query($query);			$row = mysql_fetch_array($query);			return $row[2];		}	}	public static function termen_plata($id, $data = null) {		if(!$data)			$data = date('Y-m-d');		if($id <> null) {			$query = "SELECT * FROM asociatii_setari WHERE asoc_id=".$id;			$query = mysql_query($query);			$row = mysql_fetch_array($query);			$termen =  $row[3];			$termen = "+".$termen." days";			return date('d.m.Y', strtotime($termen, strtotime($data)));		}	}	public static function data_scadentei($id, $data = null) {		if(!$data)			$data = date('Y-m-d');		if($id <> null) {			$query = "SELECT * FROM asociatii_setari WHERE asoc_id=".$id;			$query = mysql_query($query);			$row = mysql_fetch_array($query);			$termen =  $row[3];			$termen += 30;			$termen = "+".$termen." days";			return date('d.m.Y', strtotime($termen, strtotime($data)));		}	}	public static function getPresedinte($asocId) {		$sql = 'SELECT * FROM asociatii WHERE asoc_id='.$asocId;		$q = mysql_query($sql) or die('Nu pot afla numele presedintelui');		return mysql_result($q, 0, 'presedinte');	}	public static function get_um($id) {		$query = "SELECT * FROM servicii WHERE serv_id=".$id;		$query = mysql_query($query);		$um = mysql_result($query,0,'unitate');		if($um == 0) { return "ap"; }		if($um == 1) { return "ci"; }		if($um == 2) { return "pers"; }		if($um == 3) { return "mc"; }		if($um == 4) { return "gc"; }		if($um == 5) { return "kw"; }		if($um == 6) { return "rep"; }	}	public static function back_month($date) {		if ($date <> null) {			$date = explode("-", $date);			if ($date[0] <> 1) {				$luna = $date[0] - 1;			} else {				$luna = 12;				$date[1] -= 1;			}			return $luna . "-" . $date[1];		}	}	/* Aceasta functie verifica daca un omulet are plati inavans si datorii, atunci face o regularizare a sumelor de bani */	public static function regularizare_conturi($asocId = null, $scaraId = null, $locId = null) {		include_once("modules/fise/Penalizare.class.php");		$sql = "SELECT loc_id, scara_id, asoc_id FROM locatari";		if($locId != null)			$sql .= " WHERE loc_id=".$locId;		if($locId == null && $scaraId != null)			$sql .= " WHERE scara_id=".$scaraId;		if($locId == null && $scaraId == null && $asocId != null)			$sql .= " WHERE asoc_id=".$asocId;		$query_loc = mysql_query($sql) or die("Nu am putut afla locatari pentru care trebuie sa fac regularizarea conturilor <br />".$sql."<br />".mysql_error());		while($loc = mysql_fetch_array($query_loc)) {			$sql = "SELECT sum(rest_plata) FROM fisa_cont WHERE loc_id=".$loc['loc_id']." AND rest_plata<0";			$query_avans = mysql_query($sql) or die("Nu am putut afla daca locatarul curent are plati in avans <br />".$sql."<br />".mysql_error());			$avans = -1 * mysql_result($query_avans, 0, 'sum(rest_plata)');  //avansul este pozitiv			if($avans > 0) {//daca exista o valoarea > 0  a platilor in avans				$sql = "SELECT id, rest_plata FROM fisa_cont WHERE loc_id=".$loc['loc_id']." AND rest_plata>0";				$query_datorie = mysql_query($sql) or die("Nu am putut afla daca locatarul curent are inregistrari care nu au fost achitate integral <br />".$sql."<br />".mysql_error());				if(mysql_num_rows($query_datorie) > 0) {//daca are si inregistrari neplatite integral					$sql = "UPDATE fisa_cont SET rest_plata=0 WHERE loc_id=".$loc['loc_id']." AND rest_plata<0"; //suma de plata este salvata in avans					$query_update = mysql_query($sql) or die("Nu am putut actualiza suma platita in avans de locatarul curent <br />".$sql."<br />".mysql_error());					$sql = 'SELECT id FROM `fisa_cont` WHERE loc_id='.$loc['loc_id'].' AND act <>"LP" ORDER BY data DESC LIMIT 1';					$ultimaChitanta = $query_avans = mysql_query($sql) or die("Nu pot afla ultima chitanta <br />".$sql);					$ultimaChitanta = mysql_result($ultimaChitanta, 0, 'id');					$penalizare = new Penalizare($loc['loc_id'], $loc['scara_id'], $loc['asoc_id']);					$penalizare->platesteDebit($avans, $ultimaChitanta);				}			}		}	}	public static $separator = " ";	/*	function grup3($gen, $cifra1, $cifra2, $cifra3)	   genereaza textul pentru un grup de 3 cifre	   parametrii:	   $gen = genul terminatiei aplicate, pentru limba romana	   $gen = 1 (masculin), 2 (feminin), 3 (neutru)	   $cifra1, $cifra2, $cifra3 = cele 3 cifre ale grupului pentru care se produce textul	*/	public static function grup3($gen, $cifra1, $cifra2, $cifra3) {		$sute = array('','o suta ','doua sute ','trei sute ','patru sute ','cinci sute ','sase sute ','sapte sute ','opt sute ','noua sute ');		$zeci = array('','zece ','douazeci ','treizeci ','patruzeci ','cinzeci ','saizeci ','saptezeci ','optzeci ','nouazeci ');		$unitati = array('','','do','trei','patru','cinci','sase','sapte','opt','noua');		$cuspre = array('','un','do','trei','patru','cin','sai','sapte','opt','noua');		$sufix = array( array('un','unu','i'), array('o','una','ua'), array('un','unu','ua'), array('unu','unu','i'));		//$s = "";		//echo $cifra3;		$s = $sute[$cifra1];		if (($cifra2 == 1) && ($cifra3 > 0)) {			$s .= $cuspre[$cifra3].(($cifra3 == 2)?($sufix[$gen][2]):(""))."sprezece ";		} else {			$s .= $zeci[$cifra2];			if (($cifra2 > 1) && ($cifra3 != 0)) {				$s .= "si ";			}			$s .= $unitati[$cifra3];			if ($cifra3 == 1) {				if (($cifra1 == 0) && ($cifra2 == 0)) {					$s .= $sufix[$gen][0];				} else {					$s .= $sufix[$gen][1];				}			}			if ($cifra3 == 2) {				$s .= $sufix[$gen][2];			}		}		//$grup3 = $s;		return $s;	}	/*	function traducere($valoare,$unitate)	   genereaza scrierea in litere pentru o valoare in cifre	   $valoare = numarul pentru care se genereaza textul	   $unitate = moneda sau unitatea de masura	   $unitate = {'lei', 'bani'}	*/	public static function traducere($valoare,$unitate) {		$grupe = array("","mii ","milioane ","miliarde ","mii de miliarde ");		$grupe3 = array();		//$s1 = "";		$traducere = "Traducerea nu a fost efectuata.";		if ($valoare == 0) return "zero".$unitate;		if ($valoare == 1) return "un".($unitate == ' lei' ? ' leu' : ' ban');		$si = $valoare;		$sf = "";		while ($si > 0){			array_push($grupe3, $si % 1000);			$si = ($si - ($si % 1000))/1000;		}		$grupe3 = array_reverse($grupe3);		$indexgrupa = sizeof($grupe3);		foreach ($grupe3 as $grupa)		{			$c1 = $grupa % 10;			$grupa = ($grupa - ($grupa % 10))/10;			$c2 = $grupa % 10;			$grupa = ($grupa - ($grupa % 10))/10;			$c3 = $grupa;			if (($c1 == 0) && ($c2 == 0) && ($c3 == 0)) {			} else {				switch ($indexgrupa) {					case 1: $sf .= Util::grup3(3,$c3,$c2,$c1);						break;					case 2: $sf .= Util::grup3(1,$c3,$c2,$c1);						if (($c3 == 0) && ($c2 == 0) && ($c1 == 1)) {							$sf .= " mie ";						} else {							$sf .= " mii ";						}						break;					case 3: $sf .= Util::grup3(2,$c3,$c2,$c1);						if (($c3 == 0) && ($c2 == 0) && ($c1 == 1)) {							$sf .= " milion ";						} else {							$sf .= " milioane ";						}						break;					case 4: $sf .= Util::grup3(2,$c3,$c2,$c1);						if (($c3 == 0) && ($c2 == 0) && ($c1 == 1)) {							$sf .= " miliard ";						} else {							$sf .= " miliarde ";						}						break;					case 5: $sf .= Util::grup3(1,$c3,$c2,$c1);						if (($c3 == 0) && ($c2 == 0) && ($c1 == 1)) {							$sf .= " mie de miliarde ";						} else {							$sf .= " mii de miliarde ";						}						break;					default: $sf .= "";				}			}			$indexgrupa += -1;		}		return $sf.$unitate;	}	/*	function traducere2($valoare)	   genereaza scrierea in litere pentru o valoare exprimata in lei si bani	   $valoare = valoarea pentru care se genereaza textul	*/	public static function traducere2($valoare) {		$decimal_point = ".";		$sf = "";		$valori = explode($decimal_point,$valoare);		if (intval($valori[0]) != 0) {			$sf = Util::traducere(intval($valori[0])," lei");		}		if (isset($valori[1]) && intval($valori[1]) != 0) {			if ($sf != "") { $sf .= " si "; }			if(($valori[1] < 10) && (strlen($valori[1]) == 1)) $valori[1] *= 10;			$sf .= Util::traducere(intval($valori[1])," bani");		}		$sf = str_replace(" ", Util::$separator, $sf);		return $sf;	}	public static function dateToLuna($date){		$d = explode('-', $date);		$d = intval($d[0]);		switch($d) {			case 1: case '01':				return 'Ianuarie';			case 2: case '02':				return 'Februarie';			case 3: case '03':				return 'Martie';			case 4: case '04':				return 'Aprilie';			case 5: case '05':				return 'Mai';			case 6: case '06':				return 'Iunie';			case 7: case '07':				return 'Iulie';			case 8: case '08':				return 'August';			case 9: case '09':				return 'Septembrie';			case 10:				return 'Octombrie';			case 11:				return 'Noiembrie';			case 12:				return 'Decembrie';			default:				sfContext::getInstance()->getLogger()->err('{UtilHelper} dateToLuna() '.$date.' nu este cuprins in intervalul 1-12');		}	}	public static function lunaToString($luna){		switch($luna) {			case 1: case '01':				return 'Ianuarie';			case 2: case '02':				return 'Februarie';			case 3: case '03':				return 'Martie';			case 4: case '04':				return 'Aprilie';			case 5: case '05':				return 'Mai';			case 6: case '06':				return 'Iunie';			case 7: case '07':				return 'Iulie';			case 8: case '08':				return 'August';			case 9: case '09':				return 'Septembrie';			case 10:				return 'Octombrie';			case 11:				return 'Noiembrie';			case 12:				return 'Decembrie';			default:				sfContext::getInstance()->getLogger()->err('{UtilHelper} lunaToString() '.$date.' nu este de forma 0[1-9]|1[012]');		}	}	public static function lunaToData($luna){		$luna = strtolower($luna);		switch($luna){			case 'ianuarie': case 'ian':				$luna = 1;				break;			case 'februarie': case 'feb':				$luna = 2;				break;			case 'martie': case 'mar':				$luna = 3;				break;			case 'aprilie': case 'apr':				$luna = 4;				break;			case 'mai':				$luna = 5;				break;			case 'iunie': case 'iun':				$luna = 6;				break;			case 'iulie': case 'iul':				$luna = 7;				break;			case 'august': case 'aug':				$luna = 8;				break;			case 'septembrie': case 'sep':				$luna = 9;				break;			case 'octombrie': case 'oct':				$luna = 10;				break;			case 'noiembrie': case 'noi':				$luna = 11;				break;			case 'decembrie': case 'dec':				$luna = 12;				break;			default:				sfContext::getInstance()->getLogger()->err('{UtilHelper} lunaToData() '.$luna.' nu este o luna valida');				return null;		} // switch		return date('m-Y', mktime(1,1,1,$luna,1,($luna <= date('n') ? date('Y') :  date('Y')-1)));	}	public static function nrToLuna($luna){		switch($luna) {			case 1:				return 'Ian';			case 2:				return 'Feb';			case 3:				return 'Mar';			case 4:				return 'Apr';			case 5:				return 'Mai';			case 6:				return 'Iun';			case 7:				return 'Iul';			case 8:				return 'Aug';			case 9:				return 'Sep';			case 10:				return 'Oct';			case 11:				return 'Noi';			case 12:				return 'Dec';			default:				sfContext::getInstance()->getLogger()->err('{UtilHelper} nrToLuna() '.$luna.' nu este cuprins in intervalul 1-12');		}	}	public static function arrayLuni($start, $nr){		if(!preg_match('/[01][0-9]-[12][0-9][0-9][0-9]/', $start)) return array();		$start = explode('-', $start);		$rezult = array();		for($i=0; $i<$nr; $i++){			$aux = array();			$aux['data'] = date('m-Y', mktime(1,1,1,$start[0]-$i, 1, $start[1]));			$aux['luna'] = date('m', mktime(1,1,1,$start[0]-$i, 1, $start[1]));			$aux['an'] = date('Y', mktime(1,1,1,$start[0]-$i, 1, $start[1]));			$aux['text'] = nrToLuna($aux['luna']);			$rezult[]= $aux;		}		return $rezult;	}	public static function getTabelApometreFI($locId, $luna) {		$loc_set_s = 'SELECT * FROM locatari WHERE loc_id='.$locId;		$loc_set_q = mysql_query($loc_set_s) or die('Nu pot afla setarile locatarului <br />'.$loc_set_s);		$loc_set_r = mysql_fetch_assoc($loc_set_q);		$rez = '<table border="1" cellpadding="0" cellspacing="0"><tr width="250"><td></td>';		for($i = 0; $i < $loc_set_r['ap_rece']; $i++)			$rez .= '<td width="50">AR'.($i+1).'</td>';		for($i = 0; $i < $loc_set_r['ap_calda']; $i++)			$rez .= '<td width="50">AC'.($i+1).'</td>';		$rez .='</tr>';		$luna_ant = explode('-', $luna);		$luna_ant = strtotime($luna_ant[1].'-'.$luna_ant[0].'-1');		$luna_ant = strtotime('-1 month', $luna_ant);		$luna_ant = date('m-Y', $luna_ant);		$ap_ant_s = 'SELECT * FROM apometre WHERE loc_id='.$locId.' AND luna="'.$luna_ant.'"';		$ap_ant_q = mysql_query($ap_ant_s) or die('Nu pot afla setarile locatarului <br />'.$ap_ant_s);		$ap_ant_r = mysql_fetch_assoc($ap_ant_q);		$rez .= '<tr><td style="white-space:nowrap">Index Vechi</td>';		for($i = 1; $i <= $loc_set_r['ap_rece']; $i++)			$rez .= '<td>'.($ap_ant_r['r'.$i]).'</td>';		for($i = 1; $i <= $loc_set_r['ap_calda']; $i++)			$rez .= '<td>'.($ap_ant_r['c'.$i]).'</td>';		$rez .='</tr>';		$ap_curent_s = 'SELECT * FROM apometre WHERE loc_id='.$locId.' AND luna="'.$luna.'"';		$ap_curent_q = mysql_query($ap_curent_s) or die('Nu pot afla setarile locatarului <br />'.$ap_curent_s);		$ap_curent_r = mysql_fetch_assoc($ap_curent_q);		$rez .= '<tr><td style="white-space:nowrap">Index Nou</td>';		for($i = 1; $i <= $loc_set_r['ap_rece']; $i++)			$rez .= '<td>'.($ap_curent_r['r'.$i]).'</td>';		for($i = 1; $i <= $loc_set_r['ap_calda']; $i++)			$rez .= '<td>'.($ap_curent_r['c'.$i]).'</td>';		$rez .='</tr>';		$rez .= '<tr><td style="white-space:nowrap">Index Declarat</td>';		for($i = 0; $i < $loc_set_r['ap_rece']; $i++)			$rez .= '<td></td>';		for($i = 0; $i < $loc_set_r['ap_calda']; $i++)			$rez .= '<td></td>';		$rez .='</tr>';		$rez .='</table>';		return $rez;	}	public static function getDataProcesare($scara_id, $luna) {		$lp_s = 'SELECT * FROM lista_plata WHERE scara_id='.$scara_id.' AND luna=\''.$luna.'\' GROUP BY procesata';		$lp_q = mysql_query($lp_s) or die(mysql_error().' <br /> '.$lp_s);		if(mysql_num_rows($lp_q) != 1)			return null;		$lp_r = mysql_fetch_assoc($lp_q);		if ($lp_r['procesata'] != 1) 			return null;		$total_luna = round($lp_r['ar_val'] + $lp_r['ac_val'] + $lp_r['dif_ac'] + $lp_r['dif_ar'] + $lp_r['incalzire'] + $lp_r['chelt_pe_pers'] + $lp_r['chelt_cota_indiv'] + $lp_r['chelt_pe_benef'] + $lp_r['alte_cheltuieli'], 2);			$luna = explode('-', $luna);		$luna = $luna[1].'-'.$luna[0].'-01';		$fc_s = 'SELECT *, (('.$total_luna.'-valoare)*('.$total_luna.'-valoare)) as aproximatie				 				 FROM fisa_cont 				 				 WHERE loc_id='.$lp_r['loc_id'].' 				 AND act=\'LP\' 				 AND data>=\''.date('Y-m-d', strtotime('+1 months', strtotime($luna))).'\' 				 AND data<=\''.date('Y-m-d', strtotime('+4 months', strtotime($luna))).'\' 				 				 ORDER BY (('.$total_luna.'-valoare)*('.$total_luna.'-valoare)) ASC				 LIMIT 1';		$fc_q = mysql_query($fc_s) or die(mysql_error().' <br /> '.$fc_s);		if(mysql_num_rows($fc_q) != 1)			return null;		$fc_r = mysql_fetch_assoc($fc_q);				return $fc_r['aproximatie']>0.1 ? null : $fc_r['data'];	}}//include_once 'componente/config.php';//Util::regularizare_conturi(null, null, 308);